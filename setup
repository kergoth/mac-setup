#!/bin/sh

default_categories=core
export HOMEBREW_USER_PREFIX="~/.brew"
export HOMEBREW_ADMIN_PREFIX="/opt/homebrew"

set -eu

usage() {
    cat >&2 <<END
${0##*/} [options] [CATEGORY..]

Set up a macOS system the way I like it. Relies heavily on brew-bundle.
If no CATEGORY is specified, defaults to $default_categories.
HOMEBREW_ADMIN_PREFIX defaults to $HOMEBREW_ADMIN_PREFIX.
HOMEBREW_USER_PREFIX defaults to $HOMEBREW_USER_PREFIX.

Options:
  -a ADMIN_USER    Specify the administrative user to use.
  -u STANDARD_USER Specify the standard user to use.
  -s               Single user mode, assume use of a single administrative user, no standard.
  -A HOMEBREW_ADMIN_PREFIX  Specify the homebrew prefix for the administrative user.
  -U HOMEBREW_USER_PREFIX   Specify the homebrew prefix for the standard user.
  -i INSTALL_APPS_ARGS      Specify arguments to pass to ./scripts/install-apps.
END
    echo >&2 "${0##*/} [options]"
    exit 2
}

die() {
    die_msg="$1"
    shift
    # shellcheck disable=SC2059
    printf >&2 "$die_msg\n" "$@"
    exit 1
}

run_as_user() {
    run_user="$1"
    shift
    run_prefix="$1"
    shift

    if [ "$run_user" = "$user" ]; then
        set -- env HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_PREFIX="$run_prefix" HOMEBREW_CASK_OPTS="${HOMEBREW_CASK_OPTS:+} --appdir=~/Applications" "$PWD/scripts/run" "$PWD" "$@"
    else
        set -- env HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_PREFIX="$run_prefix" "$PWD/scripts/run" "$PWD" "$@"
    fi

    if [ "$this_user" = "$run_user" ]; then
        echo >&2 "Running '$*'"
        command "$@"
    else
        echo >&2 "Running '$*' as $run_user, input $run_user's password"
        su - "$run_user" -c 'command "$@"' - "$@"
    fi
}

run_user() {
    run_as_user "$user" "$HOMEBREW_USER_PREFIX" "$@"
}

run_admin() {
    run_as_user "$adminuser" "$HOMEBREW_ADMIN_PREFIX" "$@"
}

install_admin=0
install_user=0
adminuser=
user=
singleuser=0
install_apps_args=
while getopts a:u:A:U:si:h opt; do
    case "$opt" in
        a)
            adminuser="$OPTARG"
            install_admin=1
            ;;
        u)
            user="$OPTARG"
            install_user=1
            ;;
        A)
            HOMEBREW_ADMIN_PREFIX="$OPTARG"
            ;;
        U)
            HOMEBREW_USER_PREFIX="$OPTARG"
            ;;
        s)
            singleuser=1
            ;;
        i)
            install_apps_args="$OPTARG"
            ;;
        \? | h)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
    # shellcheck disable=SC2248
    set -- $default_categories
fi

this_user="$(whoami)"
if [ "$singleuser" -eq 1 ]; then
    if [ -n "$user" ]; then
        die "Must not specify -u with -s"
    fi
    if [ -n "$adminuser" ]; then
        die "Must not specify -a with -s"
    fi
    adminuser="$this_user"
    user="$this_user"
    HOMEBREW_USER_PREFIX="$HOMEBREW_ADMIN_PREFIX"
else
    if [ -z "$adminuser" ] && [ -z "$user" ]; then
        if groups | grep -qw admin; then
            adminuser="$this_user"
            install_admin=1
        else
            user="$this_user"
            install_user=1
        fi
    fi
fi

if [ "$install_user" -eq 1 ]; then
    echo >&2 "Standard user: $user"
else
    echo >&2 "Skipping Standard component installation. To change this, specify -s for single user mode or specify the standard user with -u."
fi

if [ "$install_admin" -eq 1 ]; then
    echo >&2 "Administrative user: $adminuser"
    echo >&2 "Installing administrative components"
    run_admin ./scripts/setup-admin
    # shellcheck disable=SC2086
    eval run_admin ./scripts/install-apps "$install_apps_args" -a "$@"
else
    echo >&2 "Skipping Administrative component installation. To change this, specify -s for single user mode or specify the administrative user with -a."
fi

if [ "$install_user" -eq 1 ]; then
    echo >&2 "Installing standard components"
    # shellcheck disable=SC2086
    eval run_user ./scripts/install-apps "$install_apps_args" -u "$@"
    run_user brew install duti jq   # Needed by setup-apps (via setup-user) to set up associations
    run_user ./scripts/setup-user
    run_user ./scripts/setup-user-extra
    run_user ./scripts/install-apps -u -d ./brews "$@"
fi
